# coding: utf-8

"""
    DNS Configuration API

    The DNS application is a BloxOne DDI service that provides cloud-based DNS configuration with on-prem host serving DNS protocol. It is part of the full-featured BloxOne DDI solution that enables customers the ability to deploy large numbers of protocol servers in the delivery of DNS and DHCP throughout their enterprise network.   

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from dns_config import AuthNSG
from dns_config.api import NewApiClient


AuthNSGCreate = AuthNSG(
    # Add required attributes to create the object
    Comment = "hello",
    name = "hello"
)
AuthNSGUpdate = AuthNSG(
    # Add required attributes to update the object
    Comment = "hello2",
    name = "hello"
)

class TestAuthNsgApi(unittest.TestCase):
    """AuthNsgApi unit test stubs"""

    id = None

    def setUp(self) -> None:
        self.api = NewApiClient()
        self.response = None

    def tearDown(self) -> None:
        pass

    def test_a_create(self) -> None:
        """Test case for create

        Create the AuthNSG object.
        """

        self.response = self.api.auth_nsg_api.create(
            body=AuthNSGCreate,
        )
        TestAuthNsgApi.id = self.response.result.id
        self.assertIsNotNone(self.response)

    def test_b_list(self) -> None:
        """Test case for list

        List AuthNSG objects.
        """

        self.response = self.api.auth_nsg_api.list()

    def test_c_read(self) -> None:
        """Test case for read

        Read the AuthNSG object.
        """

        print(self.id)
        self.response = self.api.auth_nsg_api.read(TestAuthNsgApi.id)
        self.assertIsNotNone(self.response)

    def test_d_update(self) -> None:
        """Test case for update

        Update the AuthNSG object.
        """

        self.response = self.api.auth_nsg_api.update(
            id = TestAuthNsgApi.id,
            body=AuthNSGUpdate
        )
        self.assertIsNotNone(self.response)

    def test_e_delete(self) -> None:
        """Test case for delete

        Move the AuthNSG object to Recyclebin.
        """

        self.response = self.api.auth_nsg_api.delete(TestAuthNsgApi.id)
        self.assertIsNone(self.response)

if __name__ == '__main__':
    unittest.main()
